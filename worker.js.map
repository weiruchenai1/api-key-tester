{"version":3,"file":"worker.js","sources":["../public/worker.js"],"sourcesContent":["// Web Worker 用于处理 API 密钥测试\nlet isProcessing = false;\nlet shouldCancel = false;\nlet currentLanguage = 'zh'; // 默认中文\nconst keyGlobalStartTime = new Map();\n\nconst MAX_LOG_BODY_LENGTH = 4000;\n\nconst truncateForLog = (value, maxLength = MAX_LOG_BODY_LENGTH) => {\n  if (value == null) return value;\n  const str = typeof value === 'string' ? value : JSON.stringify(value);\n  if (str.length <= maxLength) return str;\n  return str.slice(0, maxLength) + '\\n...(+' + (str.length - maxLength) + ' chars)';\n};\n\nconst headersToObject = (headers) => {\n  if (!headers) return null;\n  try {\n    if (typeof headers.forEach === 'function') {\n      const result = {};\n      headers.forEach((value, key) => {\n        result[key] = value;\n      });\n      return result;\n    }\n    return { ...headers };\n  } catch (error) {\n    return { error: 'serialize_headers_failed', message: error.message };\n  }\n};\n\nconst createRequestLog = ({ url, method, headers, body }) => ({\n  url,\n  method,\n  headers: headersToObject(headers),\n  body: truncateForLog(body)\n});\n\nconst createResponseLog = async (response) => {\n  if (!response) return null;\n  const clone = response.clone ? response.clone() : response;\n  let bodyText = null;\n  try {\n    bodyText = await clone.text();\n  } catch (error) {\n    bodyText = '<<无法读取响应正文: ' + error.message + '>>';\n  }\n  let parsed = null;\n  try {\n    parsed = bodyText ? JSON.parse(bodyText) : null;\n  } catch (error) {\n    parsed = null;\n  }\n  return {\n    status: response.status,\n    statusText: response.statusText,\n    headers: headersToObject(response.headers),\n    body: truncateForLog(bodyText),\n    parsed\n  };\n};\n\nconst postLogEvent = (key, config, event) => {\n  if (!key) return;\n  self.postMessage({\n    type: 'LOG_EVENT',\n    payload: {\n      key,\n      apiType: config.apiType,\n      model: config.model,\n      metadata: {\n        proxyUrl: config.proxyUrl,\n        enablePaidDetection: config.enablePaidDetection,\n        concurrency: config.concurrency\n      },\n      event\n    }\n  });\n};\n\n// 错误信息翻译\nconst ERROR_MESSAGES = {\n  zh: {\n    invalidKey: 'API密钥无效',\n    authFailed: '认证失败',\n    permissionDenied: '权限不足',\n    rateLimited: '速率限制',\n    emptyResponse: '空响应',\n    jsonParseError: 'JSON解析失败',\n    responseFormatError: '响应格式错误',\n    networkError: '网络连接失败',\n    requestFailed: '请求失败',\n    testException: '测试异常',\n    authError: '认证错误',\n    apiError: 'API错误',\n    quotaExceeded: '配额超出'\n  },\n  en: {\n    invalidKey: 'Invalid API Key',\n    authFailed: 'Auth Failed',\n    permissionDenied: 'Permission Denied',\n    rateLimited: 'Rate Limited',\n    emptyResponse: 'Empty Response',\n    jsonParseError: 'JSON Parse Error',\n    responseFormatError: 'Response Format Error',\n    networkError: 'Network Connection Failed',\n    requestFailed: 'Request Failed',\n    testException: 'Test Exception',\n    authError: 'Authentication Error',\n    apiError: 'API Error',\n    quotaExceeded: 'Quota Exceeded'\n  }\n};\n\nfunction getErrorMessage(key, statusCode = null) {\n  const messages = ERROR_MESSAGES[currentLanguage] || ERROR_MESSAGES.zh;\n  const message = messages[key] || key;\n  return statusCode ? `${message} (${statusCode})` : message;\n}\n\n// 监听主线程消息\nself.onmessage = function (e) {\n  const { type, payload } = e.data;\n\n  switch (type) {\n    case 'START_TESTING':\n      startTesting(payload);\n      break;\n    case 'CANCEL_TESTING':\n      shouldCancel = true;\n      break;\n    case 'SET_LANGUAGE':\n      currentLanguage = payload.language;\n      break;\n    case 'PING':\n      self.postMessage({ type: 'PONG' });\n      break;\n    default:\n      console.warn('Unknown message type:', type);\n  }\n};\n\nasync function startTesting({ apiKeys, apiType, model, proxyUrl, concurrency, maxRetries, enablePaidDetection }) {\n  if (isProcessing) {\n    return;\n  }\n\n  isProcessing = true;\n  shouldCancel = false;\n\n  try {\n    await processKeysWithConcurrency(apiKeys, {\n      apiType,\n      model,\n      proxyUrl,\n      concurrency,\n      maxRetries,\n      enablePaidDetection\n    });\n  } finally {\n    isProcessing = false;\n    shouldCancel = false;\n    self.postMessage({ type: 'TESTING_COMPLETE' });\n  }\n}\n\nasync function processKeysWithConcurrency(apiKeys, config) {\n  const { concurrency } = config;\n  const keyQueue = [...apiKeys];\n  const activeSlots = new Array(concurrency).fill(null);\n  let nextKeyIndex = 0;\n\n  // 初始填满所有并发槽位\n  for (let i = 0; i < concurrency && i < keyQueue.length; i++) {\n    activeSlots[i] = processKeyWithRetry(keyQueue[nextKeyIndex], config, i);\n    nextKeyIndex++;\n  }\n\n  // 持续处理直到所有密钥完成或被取消\n  while (activeSlots.some(slot => slot !== null) && !shouldCancel) {\n    // 等待任意一个槽位完成\n    const completedIndex = await waitForAnySlotCompletion(activeSlots);\n\n    // 如果还有待测试的密钥，启动新的测试占用这个槽位\n    if (nextKeyIndex < keyQueue.length) {\n      activeSlots[completedIndex] = processKeyWithRetry(keyQueue[nextKeyIndex], config, completedIndex);\n      nextKeyIndex++;\n    } else {\n      // 没有新密钥了，释放槽位\n      activeSlots[completedIndex] = null;\n    }\n  }\n}\n\nasync function waitForAnySlotCompletion(activeSlots) {\n  const activePromises = activeSlots\n    .map((promise, index) => promise ? promise.then(() => index) : null)\n    .filter(p => p !== null);\n\n  if (activePromises.length === 0) {\n    throw new Error('没有活跃的测试任务');\n  }\n\n  return await Promise.race(activePromises);\n}\n\nasync function processKeyWithRetry(apiKey, config, slotIndex) {\n  const { maxRetries } = config;\n\n  const globalStart = Date.now();\n  keyGlobalStartTime.set(apiKey, globalStart);\n\n  self.postMessage({\n    type: 'KEY_STATUS_UPDATE',\n    payload: {\n      key: apiKey,\n      status: 'testing',\n      retryCount: 0\n    }\n  });\n\n  postLogEvent(apiKey, config, {\n    stage: 'test_start',\n    attempt: 1,\n    slotIndex,\n    status: 'testing',\n    timestamp: globalStart,\n    message: '开始测试'\n  });\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    if (shouldCancel) {\n      postLogEvent(apiKey, config, {\n        stage: 'cancelled',\n        attempt: attempt + 1,\n        slotIndex,\n        status: 'cancelled',\n        isFinal: true,\n        finalStatus: 'cancelled',\n        totalDurationMs: Date.now() - globalStart,\n        message: '任务被取消'\n      });\n      keyGlobalStartTime.delete(apiKey);\n      return;\n    }\n\n    const attemptIndex = attempt + 1;\n    const attemptStart = Date.now();\n\n    postLogEvent(apiKey, config, {\n      stage: 'attempt_start',\n      attempt: attemptIndex,\n      slotIndex,\n      status: attempt === 0 ? 'testing' : 'retrying',\n      timestamp: attemptStart,\n      message: '第' + attemptIndex + '次尝试'\n    });\n\n    try {\n      if (attempt > 0) {\n        self.postMessage({\n          type: 'KEY_STATUS_UPDATE',\n          payload: {\n            key: apiKey,\n            status: 'retrying',\n            retryCount: attempt\n          }\n        });\n\n        postLogEvent(apiKey, config, {\n          stage: 'retry_wait',\n          attempt: attemptIndex,\n          slotIndex,\n          status: 'retrying',\n          message: '等待重试'\n        });\n\n        await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 500));\n      }\n\n      const result = await testApiKey(apiKey, config);\n      const attemptDuration = Date.now() - attemptStart;\n\n      postLogEvent(apiKey, config, {\n        stage: 'attempt_result',\n        attempt: attemptIndex,\n        slotIndex,\n        status: result.valid ? 'success' : (result.isRateLimit ? 'rate-limited' : 'error'),\n        durationMs: attemptDuration,\n        request: result.requestLog,\n        response: result.responseLog,\n        error: result.error,\n        extra: result.extra || null\n      });\n\n      if (result.valid || result.isRateLimit) {\n        let finalResult = result;\n\n        if (result.valid && config.apiType === 'gemini' && config.enablePaidDetection) {\n          try {\n            const paidStart = Date.now();\n            const paidResult = await testGeminiPaidKey(apiKey, config.model, config);\n\n            postLogEvent(apiKey, config, {\n              stage: 'paid_detection',\n              attempt: attemptIndex,\n              slotIndex,\n              status: paidResult.isPaid === true ? 'paid' : (paidResult.isPaid === false ? 'free' : 'unknown'),\n              durationMs: Date.now() - paidStart,\n              request: paidResult.requestLog,\n              response: paidResult.responseLog,\n              error: paidResult.error,\n              extra: { cacheApiStatus: paidResult.cacheApiStatus }\n            });\n\n            if (paidResult.isPaid === true) {\n              finalResult = { ...result, isPaid: true, cacheApiStatus: paidResult.cacheApiStatus };\n            } else if (paidResult.isPaid === false) {\n              finalResult = { ...result, isPaid: false, cacheApiStatus: paidResult.cacheApiStatus };\n            } else {\n              finalResult = { ...result, isPaid: null, cacheApiStatus: paidResult.cacheApiStatus };\n            }\n          } catch (error) {\n            postLogEvent(apiKey, config, {\n              stage: 'paid_detection',\n              attempt: attemptIndex,\n              slotIndex,\n              status: 'error',\n              error: error.message || error,\n              extra: { phase: 'paid_detection_failed' }\n            });\n            finalResult = { ...result, isPaid: false };\n          }\n        }\n\n        let finalStatus;\n        if (finalResult.isPaid === true) {\n          finalStatus = 'paid';\n        } else if (result.valid) {\n          finalStatus = 'valid';\n        } else {\n          finalStatus = 'rate-limited';\n        }\n\n        self.postMessage({\n          type: 'KEY_STATUS_UPDATE',\n          payload: {\n            key: apiKey,\n            status: finalStatus,\n            error: result.error,\n            retryCount: attempt,\n            isPaid: finalResult.isPaid,\n            cacheApiStatus: finalResult.cacheApiStatus\n          }\n        });\n\n        postLogEvent(apiKey, config, {\n          stage: 'final',\n          attempt: attemptIndex,\n          slotIndex,\n          status: finalStatus,\n          finalStatus,\n          isFinal: true,\n          totalDurationMs: Date.now() - globalStart,\n          error: result.error,\n          extra: {\n            isPaid: finalResult.isPaid,\n            cacheApiStatus: finalResult.cacheApiStatus\n          }\n        });\n\n        keyGlobalStartTime.delete(apiKey);\n        return finalResult;\n      }\n\n      if (attempt === maxRetries) {\n        self.postMessage({\n          type: 'KEY_STATUS_UPDATE',\n          payload: {\n            key: apiKey,\n            status: 'invalid',\n            error: result.error,\n            retryCount: attempt\n          }\n        });\n\n        postLogEvent(apiKey, config, {\n          stage: 'final',\n          attempt: attemptIndex,\n          slotIndex,\n          status: 'invalid',\n          finalStatus: 'invalid',\n          isFinal: true,\n          totalDurationMs: Date.now() - globalStart,\n          error: result.error\n        });\n\n        keyGlobalStartTime.delete(apiKey);\n        return result;\n      }\n\n      const statusCode = extractStatusCode(result.error);\n      if (!shouldRetry(result.error, statusCode)) {\n        self.postMessage({\n          type: 'KEY_STATUS_UPDATE',\n          payload: {\n            key: apiKey,\n            status: 'invalid',\n            error: result.error,\n            retryCount: attempt\n          }\n        });\n\n        postLogEvent(apiKey, config, {\n          stage: 'final',\n          attempt: attemptIndex,\n          slotIndex,\n          status: 'invalid',\n          finalStatus: 'invalid',\n          isFinal: true,\n          totalDurationMs: Date.now() - globalStart,\n          error: result.error\n        });\n\n        keyGlobalStartTime.delete(apiKey);\n        return result;\n      }\n\n      postLogEvent(apiKey, config, {\n        stage: 'retry_scheduled',\n        attempt: attemptIndex + 1,\n        slotIndex,\n        status: 'retrying',\n        error: result.error,\n        message: '准备进行下一次重试'\n      });\n\n    } catch (error) {\n      postLogEvent(apiKey, config, {\n        stage: 'attempt_exception',\n        attempt: attempt + 1,\n        slotIndex,\n        status: 'error',\n        error: error.message || error,\n        durationMs: Date.now() - attemptStart\n      });\n\n      if (attempt === maxRetries) {\n        const finalError = '测试异常: ' + (error.message || error);\n        self.postMessage({\n          type: 'KEY_STATUS_UPDATE',\n          payload: {\n            key: apiKey,\n            status: 'invalid',\n            error: finalError,\n            retryCount: attempt\n          }\n        });\n\n        postLogEvent(apiKey, config, {\n          stage: 'final',\n          attempt: attempt + 1,\n          slotIndex,\n          status: 'invalid',\n          finalStatus: 'invalid',\n          isFinal: true,\n          totalDurationMs: Date.now() - globalStart,\n          error: finalError\n        });\n\n        keyGlobalStartTime.delete(apiKey);\n        return { valid: false, error: finalError, isRateLimit: false };\n      }\n    }\n  }\n}\n\nfunction shouldRetry(error, statusCode) {\n  // 403、502、503、504 等临时错误需要重试\n  if ([403, 502, 503, 504].includes(statusCode)) {\n    return true;\n  }\n\n  if (error && typeof error === 'string') {\n    const errorLower = error.toLowerCase();\n    if (errorLower.includes('timeout') ||\n      errorLower.includes('network') ||\n      errorLower.includes('连接') ||\n      errorLower.includes('fetch')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction extractStatusCode(error) {\n  if (!error || typeof error !== 'string') return null;\n\n  const match = error.match(/$(\\d{3})$/);\n  if (match) {\n    return parseInt(match[1]);\n  }\n\n  if (error.includes('HTTP ')) {\n    const httpMatch = error.match(/HTTP (\\d{3})/);\n    if (httpMatch) {\n      return parseInt(httpMatch[1]);\n    }\n  }\n\n  return null;\n}\n\nfunction getApiUrl(apiType, endpoint, proxyUrl) {\n  if (proxyUrl) {\n    const baseUrl = proxyUrl.endsWith('/') ? proxyUrl.slice(0, -1) : proxyUrl;\n    return baseUrl + endpoint;\n  } else {\n    switch (apiType) {\n      case 'openai':\n        return 'https://openai.weiruchenai.me/v1' + endpoint;\n      case 'claude':\n        return 'https://claude.weiruchenai.me/v1' + endpoint;\n      case 'gemini':\n        return 'https://gemini.weiruchenai.me/v1beta' + endpoint;\n      case 'deepseek':\n        return 'https://api.deepseek.com/v1' + endpoint;\n      case 'siliconcloud':\n        return 'https://api.siliconflow.cn/v1' + endpoint;\n      case 'xai':\n        return 'https://api.x.ai/v1' + endpoint;\n      case 'openrouter':\n        return 'https://openrouter.ai/api/v1' + endpoint;\n      default:\n        throw new Error('Unsupported API type: ' + apiType);\n    }\n  }\n}\n\nasync function testApiKey(apiKey, config) {\n  const { apiType, model } = config;\n\n  switch (apiType) {\n    case 'openai':\n      return await testOpenAIKey(apiKey, model, config);\n    case 'claude':\n      return await testClaudeKey(apiKey, model, config);\n    case 'gemini':\n      return await testGeminiKey(apiKey, model, config);\n    case 'deepseek':\n      return await testDeepSeekKey(apiKey, model, config);\n    case 'siliconcloud':\n      return await testSiliconCloudKey(apiKey, model, config);\n    case 'xai':\n      return await testXAIKey(apiKey, model, config);\n    case 'openrouter':\n      return await testOpenRouterKey(apiKey, model, config);\n    default:\n      return { valid: false, error: '不支持的API类型', isRateLimit: false };\n  }\n}\n\nasync function testOpenAIKey(apiKey, model, config) {\n  const apiUrl = getApiUrl('openai', '/chat/completions', config.proxyUrl);\n  const payload = {\n    model: model,\n    messages: [{ role: 'user', content: 'Hi' }],\n    max_tokens: 1\n  };\n  const headers = {\n    'Authorization': 'Bearer ' + apiKey,\n    'Content-Type': 'application/json'\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (!response.ok) {\n      if (response.status === 401) return { valid: false, error: '认证失败 (401)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 403) return { valid: false, error: '权限不足 (403)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 429) return { valid: false, error: 'Rate Limited (429)', isRateLimit: true, requestLog, responseLog };\n      return { valid: false, error: 'HTTP ' + response.status, isRateLimit: response.status === 429, requestLog, responseLog };\n    }\n\n    if (!responseLog.body || responseLog.body.trim() === '') {\n      return { valid: false, error: getErrorMessage('emptyResponse'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    const data = responseLog.parsed;\n    if (!data) {\n      return { valid: false, error: getErrorMessage('jsonParseError'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (data && data.error) {\n      const errorMessage = data.error.message || data.error.toString();\n      if (typeof errorMessage === 'string') {\n        const lower = errorMessage.toLowerCase();\n        if (lower.includes('rate limit') || lower.includes('too many requests') || lower.includes('quota exceeded')) {\n          return { valid: false, error: 'Rate Limited: ' + errorMessage, isRateLimit: true, requestLog, responseLog };\n        }\n      }\n    }\n\n    if (data && Array.isArray(data.choices)) {\n      return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n    }\n\n    return { valid: false, error: '响应格式错误', isRateLimit: false, requestLog, responseLog };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    if (error.name === 'TypeError' && message.includes('fetch')) {\n      return { valid: false, error: getErrorMessage('networkError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    return { valid: false, error: '请求失败: ' + message, isRateLimit: false, requestLog, responseLog: null };\n  }\n}\n\nasync function testClaudeKey(apiKey, model, config) {\n  const apiUrl = getApiUrl('claude', '/messages', config.proxyUrl);\n  const payload = {\n    model: model,\n    max_tokens: 1,\n    messages: [{ role: 'user', content: 'Hi' }]\n  };\n  const headers = {\n    'x-api-key': apiKey,\n    'Content-Type': 'application/json',\n    'anthropic-version': '2023-06-01'\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (response.status === 401) return { valid: false, error: '认证失败 (401)', isRateLimit: false, requestLog, responseLog };\n    if (response.status === 403) return { valid: false, error: '权限不足 (403)', isRateLimit: false, requestLog, responseLog };\n    if (response.status === 429) return { valid: false, error: 'Rate Limited (429)', isRateLimit: true, requestLog, responseLog };\n\n    if (response.status === 400) {\n      const errorData = responseLog.parsed;\n      if (errorData && errorData.error) {\n        if (errorData.error.type === 'authentication_error') {\n          return { valid: false, error: '认证错误', isRateLimit: false, requestLog, responseLog };\n        }\n        if (errorData.error.type === 'rate_limit_error') {\n          return { valid: false, error: 'Rate Limit Error', isRateLimit: true, requestLog, responseLog };\n        }\n        if (errorData.error.type === 'invalid_request_error') {\n          return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n        }\n        return { valid: false, error: 'API错误: ' + (errorData.error.type || 'unknown'), isRateLimit: false, requestLog, responseLog };\n      }\n      return { valid: false, error: getErrorMessage('jsonParseError'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (response.ok) {\n      return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n    }\n\n    return { valid: false, error: 'HTTP ' + response.status, isRateLimit: false, requestLog, responseLog };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    if (error.name === 'TypeError' && message.includes('fetch')) {\n      return { valid: false, error: getErrorMessage('networkError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    return { valid: false, error: '请求失败: ' + message, isRateLimit: false, requestLog, responseLog: null };\n  }\n}\n\nasync function testGeminiKey(apiKey, model, config) {\n  const apiUrl = getApiUrl('gemini', '/models/' + model + ':generateContent?key=' + apiKey, config.proxyUrl);\n  const payload = {\n    contents: [\n      {\n        parts: [\n          {\n            text: 'Hi'\n          }\n        ]\n      }\n    ]\n  };\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (!response.ok) {\n      if (response.status === 400) return { valid: false, error: getErrorMessage('invalidKey', 400), isRateLimit: false, requestLog, responseLog };\n      if (response.status === 401) return { valid: false, error: getErrorMessage('authFailed', 401), isRateLimit: false, requestLog, responseLog };\n      if (response.status === 403) return { valid: false, error: getErrorMessage('permissionDenied', 403), isRateLimit: false, requestLog, responseLog };\n      if (response.status === 429) return { valid: false, error: getErrorMessage('rateLimited', 429), isRateLimit: true, requestLog, responseLog };\n      return { valid: false, error: 'HTTP ' + response.status, isRateLimit: response.status === 429, requestLog, responseLog };\n    }\n\n    const data = responseLog.parsed;\n    if (!responseLog.body || responseLog.body.trim() === '') {\n      return { valid: false, error: getErrorMessage('emptyResponse'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (!data) {\n      return { valid: false, error: getErrorMessage('jsonParseError'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (data && Array.isArray(data.candidates) && data.candidates.length > 0) {\n      return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (data && data.error) {\n      const errorMessage = data.error.message || data.error.toString();\n      if (typeof errorMessage === 'string') {\n        const lower = errorMessage.toLowerCase();\n        if (lower.includes('quota exceeded') || lower.includes('rate limit') || lower.includes('too many requests')) {\n          return { valid: false, error: 'Rate Limited: ' + errorMessage, isRateLimit: true, requestLog, responseLog };\n        }\n      }\n      return { valid: false, error: 'API错误: ' + errorMessage, isRateLimit: false, requestLog, responseLog };\n    }\n\n    return { valid: false, error: '响应格式错误', isRateLimit: false, requestLog, responseLog };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    if (error.name === 'TypeError' && message.includes('fetch')) {\n      return { valid: false, error: getErrorMessage('networkError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    if (error.name === 'SyntaxError' && message.includes('JSON')) {\n      return { valid: false, error: getErrorMessage('jsonParseError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    return { valid: false, error: '请求失败: ' + message, isRateLimit: false, requestLog, responseLog: null };\n  }\n}\n\nasync function testDeepSeekKey(apiKey, model, config) {\n  const apiUrl = getApiUrl('deepseek', '/chat/completions', config.proxyUrl);\n  const payload = {\n    model: model,\n    messages: [{ role: 'user', content: 'Hi' }],\n    max_tokens: 1\n  };\n  const headers = {\n    'Authorization': 'Bearer ' + apiKey,\n    'Content-Type': 'application/json'\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (!response.ok) {\n      if (response.status === 401) return { valid: false, error: '认证失败 (401)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 403) return { valid: false, error: '权限不足 (403)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 429) return { valid: false, error: 'Rate Limited (429)', isRateLimit: true, requestLog, responseLog };\n      if (responseLog.parsed && responseLog.parsed.error && responseLog.parsed.error.message) {\n        return { valid: false, error: responseLog.parsed.error.message, isRateLimit: false, requestLog, responseLog };\n      }\n      return { valid: false, error: 'HTTP ' + response.status, isRateLimit: response.status === 429, requestLog, responseLog };\n    }\n\n    return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    if (error.name === 'TypeError' && message.includes('fetch')) {\n      return { valid: false, error: getErrorMessage('networkError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    return { valid: false, error: '请求失败: ' + message, isRateLimit: false, requestLog, responseLog: null };\n  }\n}\n\nasync function testSiliconCloudKey(apiKey, model, config) {\n  const apiUrl = getApiUrl('siliconcloud', '/chat/completions', config.proxyUrl);\n  const payload = {\n    model: model,\n    messages: [{ role: 'user', content: 'Hi' }],\n    max_tokens: 1\n  };\n  const headers = {\n    'Authorization': 'Bearer ' + apiKey,\n    'Content-Type': 'application/json'\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (!response.ok) {\n      if (response.status === 401) return { valid: false, error: '认证失败 (401)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 403) return { valid: false, error: '权限不足 (403)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 429) return { valid: false, error: 'Rate Limited (429)', isRateLimit: true, requestLog, responseLog };\n      if (responseLog.parsed && responseLog.parsed.error && responseLog.parsed.error.message) {\n        return { valid: false, error: responseLog.parsed.error.message, isRateLimit: false, requestLog, responseLog };\n      }\n      return { valid: false, error: 'HTTP ' + response.status, isRateLimit: response.status === 429, requestLog, responseLog };\n    }\n\n    const data = responseLog.parsed;\n    if (!responseLog.body || responseLog.body.trim() === '') {\n      return { valid: false, error: getErrorMessage('emptyResponse'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (!data) {\n      return { valid: false, error: getErrorMessage('jsonParseError'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (data && data.error) {\n      const errorMessage = data.error.message || data.error.toString();\n      if (typeof errorMessage === 'string') {\n        const lower = errorMessage.toLowerCase();\n        if (lower.includes('rate limit') || lower.includes('too many requests') || lower.includes('quota exceeded')) {\n          return { valid: false, error: 'Rate Limited: ' + errorMessage, isRateLimit: true, requestLog, responseLog };\n        }\n      }\n    }\n\n    if (data && Array.isArray(data.choices)) {\n      return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n    }\n\n    return { valid: false, error: '响应格式错误', isRateLimit: false, requestLog, responseLog };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    if (error.name === 'TypeError' && message.includes('fetch')) {\n      return { valid: false, error: getErrorMessage('networkError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    return { valid: false, error: '请求失败: ' + message, isRateLimit: false, requestLog, responseLog: null };\n  }\n}\n\nasync function testXAIKey(apiKey, model, config) {\n  const apiUrl = getApiUrl('xai', '/chat/completions', config.proxyUrl);\n  const payload = {\n    model: model,\n    messages: [{ role: 'user', content: 'Hi' }],\n    max_tokens: 1\n  };\n  const headers = {\n    'Authorization': 'Bearer ' + apiKey,\n    'Content-Type': 'application/json'\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (!response.ok) {\n      if (response.status === 401) return { valid: false, error: '认证失败 (401)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 403) return { valid: false, error: '权限不足 (403)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 429) return { valid: false, error: 'Rate Limited (429)', isRateLimit: true, requestLog, responseLog };\n      if (responseLog.parsed && responseLog.parsed.error && responseLog.parsed.error.message) {\n        return { valid: false, error: responseLog.parsed.error.message, isRateLimit: false, requestLog, responseLog };\n      }\n      return { valid: false, error: 'HTTP ' + response.status, isRateLimit: response.status === 429, requestLog, responseLog };\n    }\n\n    const data = responseLog.parsed;\n    if (!responseLog.body || responseLog.body.trim() === '') {\n      return { valid: false, error: getErrorMessage('emptyResponse'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (!data) {\n      return { valid: false, error: getErrorMessage('jsonParseError'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (data && data.error) {\n      const errorMessage = data.error.message || data.error.toString();\n      if (typeof errorMessage === 'string') {\n        const lower = errorMessage.toLowerCase();\n        if (lower.includes('rate limit') || lower.includes('too many requests') || lower.includes('quota exceeded')) {\n          return { valid: false, error: 'Rate Limited: ' + errorMessage, isRateLimit: true, requestLog, responseLog };\n        }\n      }\n    }\n\n    if (data && Array.isArray(data.choices)) {\n      return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n    }\n\n    return { valid: false, error: '响应格式错误', isRateLimit: false, requestLog, responseLog };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    if (error.name === 'TypeError' && message.includes('fetch')) {\n      return { valid: false, error: getErrorMessage('networkError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    return { valid: false, error: '请求失败: ' + message, isRateLimit: false, requestLog, responseLog: null };\n  }\n}\n\nasync function testOpenRouterKey(apiKey, model, config) {\n  const apiUrl = getApiUrl('openrouter', '/chat/completions', config.proxyUrl);\n  const payload = {\n    model: model,\n    messages: [{ role: 'user', content: 'Hi' }],\n    max_tokens: 1\n  };\n  const headers = {\n    'Authorization': 'Bearer ' + apiKey,\n    'Content-Type': 'application/json',\n    'HTTP-Referer': 'https://api-key-tester.com',\n    'X-Title': 'API Key Tester'\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (!response.ok) {\n      if (response.status === 401) return { valid: false, error: '认证失败 (401)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 403) return { valid: false, error: '权限不足 (403)', isRateLimit: false, requestLog, responseLog };\n      if (response.status === 429) return { valid: false, error: 'Rate Limited (429)', isRateLimit: true, requestLog, responseLog };\n      if (responseLog.parsed && responseLog.parsed.error && responseLog.parsed.error.message) {\n        return { valid: false, error: responseLog.parsed.error.message, isRateLimit: false, requestLog, responseLog };\n      }\n      return { valid: false, error: 'HTTP ' + response.status, isRateLimit: response.status === 429, requestLog, responseLog };\n    }\n\n    const data = responseLog.parsed;\n    if (!responseLog.body || responseLog.body.trim() === '') {\n      return { valid: false, error: getErrorMessage('emptyResponse'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (!data) {\n      return { valid: false, error: getErrorMessage('jsonParseError'), isRateLimit: false, requestLog, responseLog };\n    }\n\n    if (data && data.error) {\n      const errorMessage = data.error.message || data.error.toString();\n      if (typeof errorMessage === 'string') {\n        const lower = errorMessage.toLowerCase();\n        if (lower.includes('rate limit') || lower.includes('too many requests') || lower.includes('quota exceeded')) {\n          return { valid: false, error: 'Rate Limited: ' + errorMessage, isRateLimit: true, requestLog, responseLog };\n        }\n      }\n    }\n\n    if (data && Array.isArray(data.choices)) {\n      return { valid: true, error: null, isRateLimit: false, requestLog, responseLog };\n    }\n\n    return { valid: false, error: '响应格式错误', isRateLimit: false, requestLog, responseLog };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    if (error.name === 'TypeError' && message.includes('fetch')) {\n      return { valid: false, error: getErrorMessage('networkError'), isRateLimit: false, requestLog, responseLog: null };\n    }\n    return { valid: false, error: '请求失败: ' + message, isRateLimit: false, requestLog, responseLog: null };\n  }\n}\n\nasync function testGeminiPaidKey(apiKey, model, config) {\n  const longText = 'You are an expert at analyzing transcripts.'.repeat(128);\n  const apiUrl = getApiUrl('gemini', '/cachedContents', config.proxyUrl);\n  const payload = {\n    model: 'models/gemini-2.5-flash',\n    contents: [\n      {\n        parts: [\n          {\n            text: longText\n          }\n        ],\n        role: 'user'\n      }\n    ],\n    ttl: '30s'\n  };\n  const headers = {\n    'Content-Type': 'application/json',\n    'x-goog-api-key': apiKey\n  };\n  const requestLog = createRequestLog({ url: apiUrl, method: 'POST', headers, body: JSON.stringify(payload) });\n\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload)\n    });\n    const responseLog = await createResponseLog(response);\n\n    if (response.ok) {\n      return { isPaid: true, error: null, cacheApiStatus: response.status, requestLog, responseLog };\n    }\n\n    if (response.status === 429) {\n      return { isPaid: false, error: null, cacheApiStatus: response.status, requestLog, responseLog };\n    }\n\n    if (response.status === 400 || response.status === 401 || response.status === 403) {\n      return { isPaid: false, error: null, cacheApiStatus: response.status, requestLog, responseLog };\n    }\n\n    const bodyText = responseLog.body || '';\n    return {\n      isPaid: null,\n      error: 'HTTP ' + response.status + ': ' + bodyText,\n      cacheApiStatus: response.status,\n      requestLog,\n      responseLog\n    };\n  } catch (error) {\n    const message = error && error.message ? error.message : String(error);\n    return { isPaid: null, error: message, requestLog, responseLog: null };\n  }\n}\n"],"names":["isProcessing","shouldCancel","currentLanguage","keyGlobalStartTime","MAX_LOG_BODY_LENGTH","truncateForLog","value","maxLength","str","headersToObject","headers","result","key","error","createRequestLog","url","method","body","createResponseLog","response","clone","bodyText","parsed","postLogEvent","config","event","ERROR_MESSAGES","getErrorMessage","statusCode","message","e","type","payload","startTesting","apiKeys","apiType","model","proxyUrl","concurrency","maxRetries","enablePaidDetection","processKeysWithConcurrency","keyQueue","activeSlots","nextKeyIndex","i","processKeyWithRetry","slot","completedIndex","waitForAnySlotCompletion","activePromises","promise","index","p","apiKey","slotIndex","globalStart","attempt","attemptIndex","attemptStart","resolve","testApiKey","attemptDuration","finalResult","paidStart","paidResult","testGeminiPaidKey","finalStatus","extractStatusCode","shouldRetry","finalError","errorLower","match","httpMatch","getApiUrl","endpoint","testOpenAIKey","testClaudeKey","testGeminiKey","testDeepSeekKey","testSiliconCloudKey","testXAIKey","testOpenRouterKey","apiUrl","requestLog","responseLog","data","errorMessage","lower","errorData","longText"],"mappings":"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"}