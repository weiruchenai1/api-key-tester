const e="Select API Type",t="Test Model",o="Custom",s="Preset",n="Choose preset model or enter custom model name",i="Enter custom model name",a="Detected Models",c="Detecting...",l="Detected",d="Proxy Server URL (Optional)",r="Leave empty to use default proxy",p="Concurrency Control",y="Retry Control",u="Number of retries when encountering temporary errors (like 403), helps improve detection accuracy",m="API Key List (one per line)",g=`Enter API keys, one per line:
sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
...`,x="Importing",h="Import File",P="Paste",K="Pasting",f="Get Models",k="Start Test",A="Cancel Test",v="Dedupe Keys",I="Clear",T="Testing API keys...",D="Test completed",b="Total",C="Valid",S="Invalid",R="Throttled",w="Testing",F="Retrying",E="Pending",L="models",M="Enable Paid Detection",N="Enable Paid Key Detection",V="Paid Detection",q="When enabled, will lock model to gemini-2.5-flash and use cacheContent API to detect paid keys, consumes extra quota",W="⚠️ Enabling paid detection will consume additional API quota and lock model to gemini-2.5-flash",B="Paid Keys",G="Copy Paid Keys",H="Paid detection enabled",U="Paid detection disabled",Pt="All",O="Valid Keys",Q="Invalid Keys",z="Throttled Keys",J="Copy Results",Y="Copy All",j="Copy Valid Keys",X="Copy Invalid Keys",Z="Copy Throttled Keys",_="Valid",$="Invalid",ee="Throttled",te="Throttled",oe="Testing",se="Retrying",ne="Pending",ie="Logs",ae="Collect and review detailed API call logs",ce="Enabled",le="Disabled",de={title:"Log Details",noData:"No log data",noEvents:"No events recorded",request:"Request",response:"Response",duration:"Duration",attempt:"Attempt",freeKey:"Free",errorStatus:"Error",cancelled:"Cancelled",summary:{status:"Final Status",duration:"Total Duration",attempts:"Attempts",context:"Context"},stages:{testStart:"Test Started",attemptStart:"Attempt Started",attemptResult:"Attempt Result",retryWait:"Waiting Before Retry",retryScheduled:"Retry Scheduled",retry:"Retry",attemptException:"Attempt Exception",paidDetection:"Paid Detection",final:"Final Result",cancelled:"Cancelled"}},re="Valid Key",pe="Paid Key",ye="Free Key",ue="Invalid API Key",me="Please enter API keys!",ge="Please enter valid API keys!",xe="Please enter API keys first!",he="No keys to copy!",Pe="Copied {count} keys to clipboard!",Ke="Found {duplicates} duplicate keys, automatically removed. Will test {unique} unique keys.",fe="Removed {removed} duplicate keys, kept {kept} unique keys.",ke="No duplicate keys found.",Ae="Testing in progress, cannot dedupe!",ve="Testing in progress, please wait for completion before switching API type!",Ie="API keys and test results cleared.",Te="Successfully imported {count} API keys",De="No valid API keys found",be="File import failed, please check file format",Ce="Please select a .txt file",Se="File too large, please select a file smaller than 10MB",Re="Cannot read clipboard content, please ensure clipboard access is authorized",we="No keys",Fe="No valid keys",Ee="No invalid keys",Le="No throttled keys",Me="No paid keys",Ne="Detection results will be displayed here",Ve="Auth Failed",qe="Permission Denied",We="Network Failed",Be="Retry",Ge="Free Key",He="Valid Key",Ue="Usage Instructions:",Oe="• Recommend using your own reverse proxy URL, public proxies may be unstable",Qe="• Keys are only used for validation during testing, not stored",ze="OK",Je="Cancel",Ye="Confirm",je="Close",Xe="Save",Ze="Loading...",_e="Error",$e="Warning",et="Success",tt="Info",ot="Controls",st="Light",nt="Dark",it="System",at="Advanced Settings",ct="Add Provider",lt="API Key Tester",dt={invalidApiKey:"Invalid API Key (400)",authFailed401:"Auth Failed (401)",permissionDenied403:"Permission Denied (403)",rateLimited429:"Rate Limited (429)",emptyResponse:"Empty Response",httpError:"HTTP Error",networkError:"Network Error",parseError:"JSON Parse Error",timeoutError:"Request Timeout"},rt={title:"Test Gemini Paid Keys",description:"To test Gemini paid keys, some tokens need to be consumed to detect if the key has access to paid features.",warning:"⚠️ Paid detection will use Cache API and may consume additional API quota.",dontShowAgain:"Don't show this message again (can be changed in advanced settings)",confirmButton:"Yes, enable paid detection",cancelButton:"No, don't detect paid features"},pt={validKey:"Valid Key",paidKey:"Paid Key",freeKey:"Free Key",model:"Model"},yt={expandSidebar:"Expand Sidebar",collapseSidebar:"Collapse Sidebar",chineseName:"简体中文",englishName:"English",loading:"Loading...",retry:"Retry"},ut={description:"When enabled, Cache API will be used to detect paid functionality of Gemini keys, consuming additional quota",popupSettings:"Popup Settings",resetPopup:"Reset Popup",resetDescription:"After reset, the paid detection dialog will show again next time you select Gemini",currentApiType:"Current API Type",detectionStatus:"Detection Status",fixedModel:"Fixed Model",resetModalTitle:"Reset Popup Settings",resetModalMessage:"Are you sure to reset popup settings? After reset, the paid detection dialog will show again next time you select Gemini.",confirm:"Confirm",cancel:"Cancel"},mt={logTooltip:"Tip: Click a test result card to view the log for that key."},gt={title:"Balance",refresh:"Refresh",refreshing:"Querying...",accountBalance:"Account Balance",userNickname:"User Nickname",email:"Email",fetchFailed:"Query Failed",clickToRefresh:"Click refresh button to query balance information"},xt="Show Detailed Logs",ht="Control whether to show detailed API call logs",Kt={selectApi:e,selectModel:t,customModel:o,presetModel:s,modelHelp:n,modelInputPlaceholder:i,detectedModelsTitle:a,detecting:c,detected:l,proxyUrl:d,proxyHelp:r,concurrencyControl:p,retryControl:y,retryHelp:u,apiKeys:m,apiKeysPlaceholder:g,import:"Import",importing:x,importFile:h,paste:P,pasting:K,detectModels:f,startTest:k,cancelTest:A,dedupeKeys:v,clear:I,testing:T,completed:D,total:b,valid:C,invalid:S,rateLimited:R,testingLabel:w,retrying:F,pending:E,models:L,enablePaidDetection:M,enablePaidKeyDetection:N,paidDetection:V,paidDetectionHelp:q,paidDetectionWarning:W,paidKeys:B,copyPaidKeys:G,paidDetectionEnabled:H,paidDetectionDisabled:U,all:"All",validKeys:O,invalidKeys:Q,rateLimitedKeys:z,copyResults:J,copyAll:Y,copyValid:j,copyInvalid:X,copyRateLimited:Z,statusValid:_,statusInvalid:$,statusRateLimit:ee,statusRateLimited:te,statusTesting:oe,statusRetrying:se,statusPending:ne,logs:ie,logsHelp:ae,enabled:ce,disabled:le,logViewer:de,validKeyInfo:re,paidKeyInfo:pe,freeKeyInfo:ye,invalidKeyInfo:ue,enterApiKeys:me,enterValidKeys:ge,enterApiKeysFirst:xe,noKeysToCopy:he,keysCopied:Pe,duplicatesRemoved:Ke,dedupeSuccess:fe,noDuplicatesFound:ke,cannotDedupeWhileTesting:Ae,cannotSwitchWhileTesting:ve,cleared:Ie,importSuccess:Te,noValidKeysFound:De,importFailed:be,selectTextFile:Ce,fileTooLarge:Se,clipboardError:Re,noKeys:we,noValidKeys:Fe,noInvalidKeys:Ee,noRateLimitedKeys:Le,noPaidKeys:Me,resultsWillShow:Ne,authFailed:Ve,permissionDenied:qe,networkFailed:We,retry:Be,freeKey:Ge,validKey:He,usageTitle:Ue,usage1:Oe,usage2:Qe,ok:ze,cancel:Je,confirm:Ye,close:je,save:Xe,loading:Ze,error:_e,warning:$e,success:et,info:tt,control:ot,lightMode:st,darkMode:nt,systemMode:it,advancedSettings:at,addProvider:ct,appTitle:lt,errorMessages:dt,paidDetectionDialog:rt,keyStatus:pt,ui:yt,paidDetectionSettings:ut,results:mt,balance:gt,showDetailedLogs:xt,showDetailedLogsDescription:ht};export{ct as addProvider,at as advancedSettings,Pt as all,m as apiKeys,g as apiKeysPlaceholder,lt as appTitle,Ve as authFailed,gt as balance,Je as cancel,A as cancelTest,Ae as cannotDedupeWhileTesting,ve as cannotSwitchWhileTesting,I as clear,Ie as cleared,Re as clipboardError,je as close,D as completed,p as concurrencyControl,Ye as confirm,ot as control,Y as copyAll,X as copyInvalid,G as copyPaidKeys,Z as copyRateLimited,J as copyResults,j as copyValid,o as customModel,nt as darkMode,v as dedupeKeys,fe as dedupeSuccess,Kt as default,f as detectModels,l as detected,a as detectedModelsTitle,c as detecting,le as disabled,Ke as duplicatesRemoved,M as enablePaidDetection,N as enablePaidKeyDetection,ce as enabled,me as enterApiKeys,xe as enterApiKeysFirst,ge as enterValidKeys,_e as error,dt as errorMessages,Se as fileTooLarge,Ge as freeKey,ye as freeKeyInfo,be as importFailed,h as importFile,Te as importSuccess,x as importing,tt as info,S as invalid,ue as invalidKeyInfo,Q as invalidKeys,pt as keyStatus,Pe as keysCopied,st as lightMode,Ze as loading,de as logViewer,ie as logs,ae as logsHelp,n as modelHelp,i as modelInputPlaceholder,L as models,We as networkFailed,ke as noDuplicatesFound,Ee as noInvalidKeys,we as noKeys,he as noKeysToCopy,Me as noPaidKeys,Le as noRateLimitedKeys,Fe as noValidKeys,De as noValidKeysFound,ze as ok,V as paidDetection,rt as paidDetectionDialog,U as paidDetectionDisabled,H as paidDetectionEnabled,q as paidDetectionHelp,ut as paidDetectionSettings,W as paidDetectionWarning,pe as paidKeyInfo,B as paidKeys,P as paste,K as pasting,E as pending,qe as permissionDenied,s as presetModel,r as proxyHelp,d as proxyUrl,R as rateLimited,z as rateLimitedKeys,mt as results,Ne as resultsWillShow,Be as retry,y as retryControl,u as retryHelp,F as retrying,Xe as save,e as selectApi,t as selectModel,Ce as selectTextFile,xt as showDetailedLogs,ht as showDetailedLogsDescription,k as startTest,$ as statusInvalid,ne as statusPending,ee as statusRateLimit,te as statusRateLimited,se as statusRetrying,oe as statusTesting,_ as statusValid,et as success,it as systemMode,T as testing,w as testingLabel,b as total,yt as ui,Oe as usage1,Qe as usage2,Ue as usageTitle,C as valid,He as validKey,re as validKeyInfo,O as validKeys,$e as warning};
//# sourceMappingURL=en-CIBvFpNj.js.map
