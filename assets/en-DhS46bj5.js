const e="Select API Type",t="Test Model",o="Custom",s="Preset",n="Choose preset model or enter custom model name",i="Enter custom model name",a="Detected Models",c="Detecting...",l="Detected",r="Proxy Server URL (Optional)",d="Leave empty to use default proxy",p="Concurrency Control",y="Retry Control",u="Number of retries when encountering temporary errors (like 403), helps improve detection accuracy",m="Slow",g="Normal",x="Fast",h="Ultra",P="No Retry",K="Light",f="Normal",k="Heavy",v="API Key List (one per line)",A=`Enter API keys, one per line:
sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
...`,T="Importing",I="Import File",R="Paste",b="Pasting",C="Get Models",D="Start Test",S="Cancel Test",w="Dedupe Keys",F="Clear",E="Testing API keys...",N="Test completed",L="Total",M="Valid",V="Invalid",q="Throttled",W="Testing",B="Retrying",H="Pending",G="models",U="Enable Paid Detection",O="Enable Paid Key Detection",Q="Paid Detection",z="When enabled, will lock model to gemini-2.5-flash and use cacheContent API to detect paid keys, consumes extra quota",J="⚠️ Enabling paid detection will consume additional API quota and lock model to gemini-2.5-flash",Y="Paid Keys",j="Copy Paid Keys",X="Paid detection enabled",Z="Paid detection disabled",Tt="All",_="Valid Keys",$="Invalid Keys",ee="Throttled Keys",te="Copy Results",oe="Copy All",se="Copy Valid Keys",ne="Copy Invalid Keys",ie="Copy Throttled Keys",ae="Valid",ce="Invalid",le="Throttled",re="Throttled",de="Testing",pe="Retrying",ye="Pending",ue="Logs",me="Collect and review detailed API call logs",ge="Enabled",xe="Disabled",he={title:"Log Details",noData:"No log data",noEvents:"No events recorded",request:"Request",response:"Response",duration:"Duration",attempt:"Attempt",freeKey:"Free",errorStatus:"Error",cancelled:"Cancelled",summary:{status:"Final Status",duration:"Total Duration",attempts:"Attempts",context:"Context"},stages:{testStart:"Test Started",attemptStart:"Attempt Started",attemptResult:"Attempt Result",retryWait:"Waiting Before Retry",retryScheduled:"Retry Scheduled",retry:"Retry",attemptException:"Attempt Exception",paidDetection:"Paid Detection",final:"Final Result",cancelled:"Cancelled"}},Pe="Valid Key",Ke="Paid Key",fe="Free Key",ke="Invalid API Key",ve="Please enter API keys!",Ae="Please enter valid API keys!",Te="Please enter API keys first!",Ie="No keys to copy!",Re="Copied {count} keys to clipboard!",be="Found {duplicates} duplicate keys, automatically removed. Will test {unique} unique keys.",Ce="Removed {removed} duplicate keys, kept {kept} unique keys.",De="No duplicate keys found.",Se="Testing in progress, cannot dedupe!",we="Testing in progress, please wait for completion before switching API type!",Fe="API keys and test results cleared.",Ee="Successfully imported {count} API keys",Ne="No valid API keys found",Le="File import failed, please check file format",Me="Please select a .txt file",Ve="File too large, please select a file smaller than 10MB",qe="Cannot read clipboard content, please ensure clipboard access is authorized",We="No keys",Be="No valid keys",He="No invalid keys",Ge="No throttled keys",Ue="No paid keys",Oe="Detection results will be displayed here",Qe="Auth Failed",ze="Permission Denied",Je="Network Failed",Ye="Retry",je="Free Key",Xe="Valid Key",Ze="Usage Instructions:",_e="• Recommend using your own reverse proxy URL, public proxies may be unstable",$e="• Keys are only used for validation during testing, not stored",et="OK",tt="Cancel",ot="Confirm",st="Close",nt="Save",it="Loading...",at="Error",ct="Warning",lt="Success",rt="Info",dt="Controls",pt="Light",yt="Dark",ut="System",mt="Advanced Settings",gt="Add Provider",xt="API Key Tester",ht={invalidApiKey:"Invalid API Key (400)",authFailed401:"Auth Failed (401)",permissionDenied403:"Permission Denied (403)",rateLimited429:"Rate Limited (429)",emptyResponse:"Empty Response",httpError:"HTTP Error",networkError:"Network Error",parseError:"JSON Parse Error",timeoutError:"Request Timeout"},Pt={title:"Test Gemini Paid Keys",description:"To test Gemini paid keys, some tokens need to be consumed to detect if the key has access to paid features.",warning:"⚠️ Paid detection will use Cache API and may consume additional API quota.",dontShowAgain:"Don't show this message again (can be changed in advanced settings)",confirmButton:"Yes, enable paid detection",cancelButton:"No, don't detect paid features"},Kt={validKey:"Valid Key",paidKey:"Paid Key",freeKey:"Free Key",model:"Model"},ft={expandSidebar:"Expand Sidebar",collapseSidebar:"Collapse Sidebar",chineseName:"简体中文",englishName:"English",loading:"Loading...",retry:"Retry"},kt={description:"When enabled, Cache API will be used to detect paid functionality of Gemini keys, consuming additional quota",popupSettings:"Popup Settings",resetPopup:"Reset Popup",resetDescription:"After reset, the paid detection dialog will show again next time you select Gemini",currentApiType:"Current API Type",detectionStatus:"Detection Status",fixedModel:"Fixed Model",resetModalTitle:"Reset Popup Settings",resetModalMessage:"Are you sure to reset popup settings? After reset, the paid detection dialog will show again next time you select Gemini.",confirm:"Confirm",cancel:"Cancel"},vt={logTooltip:"Tip: Click a test result card to view the log for that key."},At={title:"Balance",refresh:"Refresh",refreshing:"Querying...",accountBalance:"Account Balance",userNickname:"User Nickname",email:"Email",fetchFailed:"Query Failed",clickToRefresh:"Click refresh button to query balance information"},It={selectApi:e,selectModel:t,customModel:o,presetModel:s,modelHelp:n,modelInputPlaceholder:i,detectedModelsTitle:a,detecting:c,detected:l,proxyUrl:r,proxyHelp:d,concurrencyControl:p,retryControl:y,retryHelp:u,slow:m,normal:g,fast:x,ultra:h,noRetry:P,lightRetry:K,normalRetry:f,heavyRetry:k,apiKeys:v,apiKeysPlaceholder:A,import:"Import",importing:T,importFile:I,paste:R,pasting:b,detectModels:C,startTest:D,cancelTest:S,dedupeKeys:w,clear:F,testing:E,completed:N,total:L,valid:M,invalid:V,rateLimited:q,testingLabel:W,retrying:B,pending:H,models:G,enablePaidDetection:U,enablePaidKeyDetection:O,paidDetection:Q,paidDetectionHelp:z,paidDetectionWarning:J,paidKeys:Y,copyPaidKeys:j,paidDetectionEnabled:X,paidDetectionDisabled:Z,all:"All",validKeys:_,invalidKeys:$,rateLimitedKeys:ee,copyResults:te,copyAll:oe,copyValid:se,copyInvalid:ne,copyRateLimited:ie,statusValid:ae,statusInvalid:ce,statusRateLimit:le,statusRateLimited:re,statusTesting:de,statusRetrying:pe,statusPending:ye,logs:ue,logsHelp:me,enabled:ge,disabled:xe,logViewer:he,validKeyInfo:Pe,paidKeyInfo:Ke,freeKeyInfo:fe,invalidKeyInfo:ke,enterApiKeys:ve,enterValidKeys:Ae,enterApiKeysFirst:Te,noKeysToCopy:Ie,keysCopied:Re,duplicatesRemoved:be,dedupeSuccess:Ce,noDuplicatesFound:De,cannotDedupeWhileTesting:Se,cannotSwitchWhileTesting:we,cleared:Fe,importSuccess:Ee,noValidKeysFound:Ne,importFailed:Le,selectTextFile:Me,fileTooLarge:Ve,clipboardError:qe,noKeys:We,noValidKeys:Be,noInvalidKeys:He,noRateLimitedKeys:Ge,noPaidKeys:Ue,resultsWillShow:Oe,authFailed:Qe,permissionDenied:ze,networkFailed:Je,retry:Ye,freeKey:je,validKey:Xe,usageTitle:Ze,usage1:_e,usage2:$e,ok:et,cancel:tt,confirm:ot,close:st,save:nt,loading:it,error:at,warning:ct,success:lt,info:rt,control:dt,lightMode:pt,darkMode:yt,systemMode:ut,advancedSettings:mt,addProvider:gt,appTitle:xt,errorMessages:ht,paidDetectionDialog:Pt,keyStatus:Kt,ui:ft,paidDetectionSettings:kt,results:vt,balance:At};export{gt as addProvider,mt as advancedSettings,Tt as all,v as apiKeys,A as apiKeysPlaceholder,xt as appTitle,Qe as authFailed,At as balance,tt as cancel,S as cancelTest,Se as cannotDedupeWhileTesting,we as cannotSwitchWhileTesting,F as clear,Fe as cleared,qe as clipboardError,st as close,N as completed,p as concurrencyControl,ot as confirm,dt as control,oe as copyAll,ne as copyInvalid,j as copyPaidKeys,ie as copyRateLimited,te as copyResults,se as copyValid,o as customModel,yt as darkMode,w as dedupeKeys,Ce as dedupeSuccess,It as default,C as detectModels,l as detected,a as detectedModelsTitle,c as detecting,xe as disabled,be as duplicatesRemoved,U as enablePaidDetection,O as enablePaidKeyDetection,ge as enabled,ve as enterApiKeys,Te as enterApiKeysFirst,Ae as enterValidKeys,at as error,ht as errorMessages,x as fast,Ve as fileTooLarge,je as freeKey,fe as freeKeyInfo,k as heavyRetry,Le as importFailed,I as importFile,Ee as importSuccess,T as importing,rt as info,V as invalid,ke as invalidKeyInfo,$ as invalidKeys,Kt as keyStatus,Re as keysCopied,pt as lightMode,K as lightRetry,it as loading,he as logViewer,ue as logs,me as logsHelp,n as modelHelp,i as modelInputPlaceholder,G as models,Je as networkFailed,De as noDuplicatesFound,He as noInvalidKeys,We as noKeys,Ie as noKeysToCopy,Ue as noPaidKeys,Ge as noRateLimitedKeys,P as noRetry,Be as noValidKeys,Ne as noValidKeysFound,g as normal,f as normalRetry,et as ok,Q as paidDetection,Pt as paidDetectionDialog,Z as paidDetectionDisabled,X as paidDetectionEnabled,z as paidDetectionHelp,kt as paidDetectionSettings,J as paidDetectionWarning,Ke as paidKeyInfo,Y as paidKeys,R as paste,b as pasting,H as pending,ze as permissionDenied,s as presetModel,d as proxyHelp,r as proxyUrl,q as rateLimited,ee as rateLimitedKeys,vt as results,Oe as resultsWillShow,Ye as retry,y as retryControl,u as retryHelp,B as retrying,nt as save,e as selectApi,t as selectModel,Me as selectTextFile,m as slow,D as startTest,ce as statusInvalid,ye as statusPending,le as statusRateLimit,re as statusRateLimited,pe as statusRetrying,de as statusTesting,ae as statusValid,lt as success,ut as systemMode,E as testing,W as testingLabel,L as total,ft as ui,h as ultra,_e as usage1,$e as usage2,Ze as usageTitle,M as valid,Xe as validKey,Pe as validKeyInfo,_ as validKeys,ct as warning};
//# sourceMappingURL=en-DhS46bj5.js.map
