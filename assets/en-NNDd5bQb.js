const e="Select API Type",t="Test Model",o="Custom",s="Preset",n="Enter custom model name",i="Detected Models",a="Detecting...",c="Detected",l="Proxy Server URL (Optional)",d="Concurrency Control",r="Retry Control",p="Number of retries when encountering temporary errors (like 403), helps improve detection accuracy",y="API Key List (one per line)",u=`Enter API keys, one per line:
sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
...`,m="Importing",g="Import File",x="Paste",h="Pasting",P="Get Models",K="Start Test",f="Cancel Test",k="Dedupe Keys",A="Clear",v="Testing API keys...",I="Test completed",T="Total",D="Valid",b="Invalid",C="Throttled",S="Testing",R="Retrying",w="Pending",F="models",E="Enable Paid Detection",L="Enable Paid Key Detection",M="Paid Detection",N="When enabled, will lock model to gemini-2.5-flash and use cacheContent API to detect paid keys, consumes extra quota",V="⚠️ Enabling paid detection will consume additional API quota and lock model to gemini-2.5-flash",q="Paid Keys",W="Copy Paid Keys",B="Paid detection enabled",G="Paid detection disabled",xt="All",U="Valid Keys",H="Invalid Keys",O="Throttled Keys",Q="Copy Results",z="Copy All",J="Copy Valid Keys",Y="Copy Invalid Keys",j="Copy Throttled Keys",X="Valid",Z="Invalid",_="Throttled",$="Throttled",ee="Testing",te="Retrying",oe="Pending",se="Logs",ne="Collect and review detailed API call logs",ie="Enabled",ae="Disabled",ce={title:"Log Details",noData:"No log data",noEvents:"No events recorded",request:"Request",response:"Response",duration:"Duration",attempt:"Attempt",freeKey:"Free",errorStatus:"Error",cancelled:"Cancelled",summary:{status:"Final Status",duration:"Total Duration",attempts:"Attempts",context:"Context"},stages:{testStart:"Test Started",attemptStart:"Attempt Started",attemptResult:"Attempt Result",retryWait:"Waiting Before Retry",retryScheduled:"Retry Scheduled",retry:"Retry",attemptException:"Attempt Exception",paidDetection:"Paid Detection",final:"Final Result",cancelled:"Cancelled"}},le="Valid Key",de="Paid Key",re="Free Key",pe="Invalid API Key",ye="Please enter API keys!",ue="Please enter valid API keys!",me="Please enter API keys first!",ge="No keys to copy!",xe="Copied {count} keys to clipboard!",he="Found {duplicates} duplicate keys, automatically removed. Will test {unique} unique keys.",Pe="Removed {removed} duplicate keys, kept {kept} unique keys.",Ke="No duplicate keys found.",fe="Testing in progress, cannot dedupe!",ke="Testing in progress, please wait for completion before switching API type!",Ae="API keys and test results cleared.",ve="Successfully imported {count} API keys",Ie="No valid API keys found",Te="File import failed, please check file format",De="Please select a .txt file",be="File too large, please select a file smaller than 10MB",Ce="Cannot read clipboard content, please ensure clipboard access is authorized",Se="No keys",Re="No valid keys",we="No invalid keys",Fe="No throttled keys",Ee="No paid keys",Le="Detection results will be displayed here",Me="Auth Failed",Ne="Permission Denied",Ve="Network Failed",qe="Retry",We="Free Key",Be="Valid Key",Ge="Usage Instructions:",Ue="• Recommend using your own reverse proxy URL, public proxies may be unstable",He="• Keys are only used for validation during testing, not stored",Oe="OK",Qe="Cancel",ze="Confirm",Je="Close",Ye="Save",je="Loading...",Xe="Error",Ze="Warning",_e="Success",$e="Info",et="Controls",tt="Light",ot="Dark",st="System",nt="Advanced Settings",it="Add Provider",at="API Key Tester",ct={invalidApiKey:"Invalid API Key (400)",authFailed401:"Auth Failed (401)",permissionDenied403:"Permission Denied (403)",rateLimited429:"Rate Limited (429)",emptyResponse:"Empty Response",httpError:"HTTP Error",networkError:"Network Error",parseError:"JSON Parse Error",timeoutError:"Request Timeout"},lt={title:"Test Gemini Paid Keys",description:"To test Gemini paid keys, some tokens need to be consumed to detect if the key has access to paid features.",warning:"⚠️ Paid detection will use Cache API and may consume additional API quota.",dontShowAgain:"Don't show this message again (can be changed in advanced settings)",confirmButton:"Yes, enable paid detection",cancelButton:"No, don't detect paid features"},dt={validKey:"Valid Key",paidKey:"Paid Key",freeKey:"Free Key",model:"Model"},rt={expandSidebar:"Expand Sidebar",collapseSidebar:"Collapse Sidebar",chineseName:"简体中文",englishName:"English",loading:"Loading...",retry:"Retry"},pt={description:"When enabled, Cache API will be used to detect paid functionality of Gemini keys, consuming additional quota",popupSettings:"Popup Settings",resetPopup:"Reset Popup",resetDescription:"After reset, the paid detection dialog will show again next time you select Gemini",currentApiType:"Current API Type",detectionStatus:"Detection Status",fixedModel:"Fixed Model",resetModalTitle:"Reset Popup Settings",resetModalMessage:"Are you sure to reset popup settings? After reset, the paid detection dialog will show again next time you select Gemini.",confirm:"Confirm",cancel:"Cancel"},yt={logTooltip:"Tip: Click a test result card to view the log for that key."},ut={title:"Balance",refresh:"Refresh",refreshing:"Querying...",accountBalance:"Account Balance",userNickname:"User Nickname",email:"Email",fetchFailed:"Query Failed",clickToRefresh:"Click refresh button to query balance information"},mt="Show Detailed Logs",gt="Control whether to show detailed API call logs",ht={selectApi:e,selectModel:t,customModel:o,presetModel:s,modelInputPlaceholder:n,detectedModelsTitle:i,detecting:a,detected:c,proxyUrl:l,concurrencyControl:d,retryControl:r,retryHelp:p,apiKeys:y,apiKeysPlaceholder:u,import:"Import",importing:m,importFile:g,paste:x,pasting:h,detectModels:P,startTest:K,cancelTest:f,dedupeKeys:k,clear:A,testing:v,completed:I,total:T,valid:D,invalid:b,rateLimited:C,testingLabel:S,retrying:R,pending:w,models:F,enablePaidDetection:E,enablePaidKeyDetection:L,paidDetection:M,paidDetectionHelp:N,paidDetectionWarning:V,paidKeys:q,copyPaidKeys:W,paidDetectionEnabled:B,paidDetectionDisabled:G,all:"All",validKeys:U,invalidKeys:H,rateLimitedKeys:O,copyResults:Q,copyAll:z,copyValid:J,copyInvalid:Y,copyRateLimited:j,statusValid:X,statusInvalid:Z,statusRateLimit:_,statusRateLimited:$,statusTesting:ee,statusRetrying:te,statusPending:oe,logs:se,logsHelp:ne,enabled:ie,disabled:ae,logViewer:ce,validKeyInfo:le,paidKeyInfo:de,freeKeyInfo:re,invalidKeyInfo:pe,enterApiKeys:ye,enterValidKeys:ue,enterApiKeysFirst:me,noKeysToCopy:ge,keysCopied:xe,duplicatesRemoved:he,dedupeSuccess:Pe,noDuplicatesFound:Ke,cannotDedupeWhileTesting:fe,cannotSwitchWhileTesting:ke,cleared:Ae,importSuccess:ve,noValidKeysFound:Ie,importFailed:Te,selectTextFile:De,fileTooLarge:be,clipboardError:Ce,noKeys:Se,noValidKeys:Re,noInvalidKeys:we,noRateLimitedKeys:Fe,noPaidKeys:Ee,resultsWillShow:Le,authFailed:Me,permissionDenied:Ne,networkFailed:Ve,retry:qe,freeKey:We,validKey:Be,usageTitle:Ge,usage1:Ue,usage2:He,ok:Oe,cancel:Qe,confirm:ze,close:Je,save:Ye,loading:je,error:Xe,warning:Ze,success:_e,info:$e,control:et,lightMode:tt,darkMode:ot,systemMode:st,advancedSettings:nt,addProvider:it,appTitle:at,errorMessages:ct,paidDetectionDialog:lt,keyStatus:dt,ui:rt,paidDetectionSettings:pt,results:yt,balance:ut,showDetailedLogs:mt,showDetailedLogsDescription:gt};export{it as addProvider,nt as advancedSettings,xt as all,y as apiKeys,u as apiKeysPlaceholder,at as appTitle,Me as authFailed,ut as balance,Qe as cancel,f as cancelTest,fe as cannotDedupeWhileTesting,ke as cannotSwitchWhileTesting,A as clear,Ae as cleared,Ce as clipboardError,Je as close,I as completed,d as concurrencyControl,ze as confirm,et as control,z as copyAll,Y as copyInvalid,W as copyPaidKeys,j as copyRateLimited,Q as copyResults,J as copyValid,o as customModel,ot as darkMode,k as dedupeKeys,Pe as dedupeSuccess,ht as default,P as detectModels,c as detected,i as detectedModelsTitle,a as detecting,ae as disabled,he as duplicatesRemoved,E as enablePaidDetection,L as enablePaidKeyDetection,ie as enabled,ye as enterApiKeys,me as enterApiKeysFirst,ue as enterValidKeys,Xe as error,ct as errorMessages,be as fileTooLarge,We as freeKey,re as freeKeyInfo,Te as importFailed,g as importFile,ve as importSuccess,m as importing,$e as info,b as invalid,pe as invalidKeyInfo,H as invalidKeys,dt as keyStatus,xe as keysCopied,tt as lightMode,je as loading,ce as logViewer,se as logs,ne as logsHelp,n as modelInputPlaceholder,F as models,Ve as networkFailed,Ke as noDuplicatesFound,we as noInvalidKeys,Se as noKeys,ge as noKeysToCopy,Ee as noPaidKeys,Fe as noRateLimitedKeys,Re as noValidKeys,Ie as noValidKeysFound,Oe as ok,M as paidDetection,lt as paidDetectionDialog,G as paidDetectionDisabled,B as paidDetectionEnabled,N as paidDetectionHelp,pt as paidDetectionSettings,V as paidDetectionWarning,de as paidKeyInfo,q as paidKeys,x as paste,h as pasting,w as pending,Ne as permissionDenied,s as presetModel,l as proxyUrl,C as rateLimited,O as rateLimitedKeys,yt as results,Le as resultsWillShow,qe as retry,r as retryControl,p as retryHelp,R as retrying,Ye as save,e as selectApi,t as selectModel,De as selectTextFile,mt as showDetailedLogs,gt as showDetailedLogsDescription,K as startTest,Z as statusInvalid,oe as statusPending,_ as statusRateLimit,$ as statusRateLimited,te as statusRetrying,ee as statusTesting,X as statusValid,_e as success,st as systemMode,v as testing,S as testingLabel,T as total,rt as ui,Ue as usage1,He as usage2,Ge as usageTitle,D as valid,Be as validKey,le as validKeyInfo,U as validKeys,Ze as warning};
//# sourceMappingURL=en-NNDd5bQb.js.map
